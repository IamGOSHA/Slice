// SCSS variables are information about icon's compiled state, stored under its original file name
//
// .icon-home {
//   width: $icon-home-width;
// }
//
// The large array-like variables contain all information about a single icon
// $icon-home: x y offset_x offset_y width height total_width total_height image_path;
//
// At the bottom of this section, we provide information about the spritesheet itself
// $spritesheet: width height image $spritesheet-sprites;
$arr-name: 'arr';
$arr-x: 22px;
$arr-y: 29px;
$arr-offset-x: -22px;
$arr-offset-y: -29px;
$arr-width: 7px;
$arr-height: 10px;
$arr-total-width: 61px;
$arr-total-height: 44px;
$arr-image: '../img/sprite.png';
$arr: (22px, 29px, -22px, -29px, 7px, 10px, 61px, 44px, '../img/sprite.png', 'arr', );
$controls-name: 'controls';
$controls-x: 0px;
$controls-y: 0px;
$controls-offset-x: 0px;
$controls-offset-y: 0px;
$controls-width: 24px;
$controls-height: 24px;
$controls-total-width: 61px;
$controls-total-height: 44px;
$controls-image: '../img/sprite.png';
$controls: (0px, 0px, 0px, 0px, 24px, 24px, 61px, 44px, '../img/sprite.png', 'controls', );
$next-arrow-name: 'next-arrow';
$next-arrow-x: 34px;
$next-arrow-y: 29px;
$next-arrow-offset-x: -34px;
$next-arrow-offset-y: -29px;
$next-arrow-width: 6px;
$next-arrow-height: 10px;
$next-arrow-total-width: 61px;
$next-arrow-total-height: 44px;
$next-arrow-image: '../img/sprite.png';
$next-arrow: (34px, 29px, -34px, -29px, 6px, 10px, 61px, 44px, '../img/sprite.png', 'next-arrow', );
$rectangle-name: 'rectangle';
$rectangle-x: 51px;
$rectangle-y: 0px;
$rectangle-offset-x: -51px;
$rectangle-offset-y: 0px;
$rectangle-width: 10px;
$rectangle-height: 6px;
$rectangle-total-width: 61px;
$rectangle-total-height: 44px;
$rectangle-image: '../img/sprite.png';
$rectangle: (51px, 0px, -51px, 0px, 10px, 6px, 61px, 44px, '../img/sprite.png', 'rectangle', );
$star-empty-name: 'star-empty';
$star-empty-x: 29px;
$star-empty-y: 0px;
$star-empty-offset-x: -29px;
$star-empty-offset-y: 0px;
$star-empty-width: 17px;
$star-empty-height: 15px;
$star-empty-total-width: 61px;
$star-empty-total-height: 44px;
$star-empty-image: '../img/sprite.png';
$star-empty: (29px, 0px, -29px, 0px, 17px, 15px, 61px, 44px, '../img/sprite.png', 'star-empty', );
$star-full-name: 'star-full';
$star-full-x: 0px;
$star-full-y: 29px;
$star-full-offset-x: 0px;
$star-full-offset-y: -29px;
$star-full-width: 17px;
$star-full-height: 15px;
$star-full-total-width: 61px;
$star-full-total-height: 44px;
$star-full-image: '../img/sprite.png';
$star-full: (0px, 29px, 0px, -29px, 17px, 15px, 61px, 44px, '../img/sprite.png', 'star-full', );
$spritesheet-width: 61px;
$spritesheet-height: 44px;
$spritesheet-image: '../img/sprite.png';
$spritesheet-sprites: ($arr, $controls, $next-arrow, $rectangle, $star-empty, $star-full, );
$spritesheet: (61px, 44px, '../img/sprite.png', $spritesheet-sprites, );

// The provided mixins are intended to be used with the array-like variables
//
// .icon-home {
//   @include sprite-width($icon-home);
// }
//
// .icon-email {
//   @include sprite($icon-email);
// }
//
// Example usage in HTML:
//
// `display: block` sprite:
// <div class="icon-home"></div>
//
// To change `display` (e.g. `display: inline-block;`), we suggest using a common CSS class:
//
// // CSS
// .icon {
//   display: inline-block;
// }
//
// // HTML
// <i class="icon icon-home"></i>
@mixin sprite-width($sprite) {
  width: nth($sprite, 5);
}

@mixin sprite-height($sprite) {
  height: nth($sprite, 6);
}

@mixin sprite-position($sprite) {
  $sprite-offset-x: nth($sprite, 3);
  $sprite-offset-y: nth($sprite, 4);
  background-position: $sprite-offset-x  $sprite-offset-y;
}

@mixin sprite-image($sprite) {
  $sprite-image: nth($sprite, 9);
  background-image: url(#{$sprite-image});
}

@mixin sprite($sprite) {
  @include sprite-image($sprite);
  @include sprite-position($sprite);
  @include sprite-width($sprite);
  @include sprite-height($sprite);
}

// The `sprites` mixin generates identical output to the CSS template
//   but can be overridden inside of SCSS
//
// @include sprites($spritesheet-sprites);
@mixin sprites($sprites) {
  @each $sprite in $sprites {
    $sprite-name: nth($sprite, 10);
    .#{$sprite-name} {
      @include sprite($sprite);
    }
  }
}
